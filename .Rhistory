colnames(data)<-c("interval","steps")
return(data)
}
)
# Plot line time series of average steps
ggplot(PatternWeekday[[i]],aes(x=interval,y=steps))+
geom_line()+ facet_grid(. ~ weekday)
# Plot line time series of average steps
ggplot(PatternWeekday[[i]],aes(x=interval,y=steps))+
geom_line()
PatternWeekday<-lapply(1:5,function(i){
data<-aggregate(
WDayData[[i]]$steps,
by=list(WDayData[[i]]$interval,WDayData[[i]]$weekday),
FUN=mean,na.rm=TRUE
)
colnames(data)<-c("interval","steps")
return(data)
}
)
PatternWeekday
ggplot(PatternWeekday[[i]],aes(x=interval,y=steps,col=weekday))+
geom_line()
aggregate(
WDayData[[i]]$steps,
by=list(WDayData[[i]]$interval,WDayData[[i]]$weekday),
FUN=mean,na.rm=TRUE
)
# Calculate mean number of steps per interval for the dataset
PatternWeekday<-lapply(1:5,function(i){
data<-aggregate(
WDayData[[i]]$steps,
by=list(WDayData[[i]]$interval,WDayData[[i]]$weekday),
FUN=mean,na.rm=TRUE
)
colnames(data)<-c("interval","weekday","steps")
return(data)
}
)
# Plot line time series of average steps
ggplot(PatternWeekday[[i]],aes(x=interval,y=steps,col=weekday))+
geom_line()+ facet_grid(. ~ weekday)
ggplot(PatternWeekday[[i]],aes(x=interval,y=steps,col=weekday))+
geom_line()+ facet_grid(weekday . ~)
ggplot(PatternWeekday[[i]],aes(x=interval,y=steps,col=weekday))+
geom_line()+ facet_grid( weekday ~ .)
# Plot line time series of average steps
ggplot(PatternWeekday[[i]],aes(x=interval,y=steps,col=weekday))+
geom_line()+ facet_grid( weekday ~ .)
for(i in 1:5){
print(
ggplot(PatternWeekday[[i]],aes(x=interval,y=steps,col=weekday))+
geom_line()+ facet_grid( weekday ~ .)
)
}
# (i.e. the total number of rows with NAs)
NumberOfMissing<-sum(is.na(data$steps))
# (create 5 datasets to check stability of estimations)
imputed_Data <- mice(data, m=5, maxit = 50, method = 'pmm', seed = 500,printFlag=FALSE)
# Calculate daily averages of imputed data for comparison with the original data
TotPerDayImputed<-lapply(1:5,function(i){
TotPerDay<-aggregate(completeData[[i]]$steps,by=list(completeData[[i]]$date),FUN=sum)
colnames(TotPerDay)<-c("date","steps")
return(TotPerDay)
})
completeData <- lapply(1:5,function(i)complete(imputed_Data,i))
# Calculate deviation for each of the imputed datasets from the original data
DevDailyTot<-sapply(1:5,function(i)TotPerDayImputed[[i]]$steps-TotPerDay$steps)
par(mfrow=c(2,3))
with(TotPerDay,hist(steps,main="Original Data",col="coral4",breaks=10))
mtext(paste0("Number of missing values: ",NumberOfMissing),cex=0.7)
for(i in 1:5){
# Plot line time series of average steps
with(TotPerDayImputed,
# Create Histogram plot
with(TotPerDayImputed[[i]],hist(steps,main=paste0("Imputed Dataset: ",i),col="deepskyblue4",breaks=10))
)
}
# reset plotting frame
par(mfrow=c(1,1))
---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
<!--- Set up working directory -->
```{r echo=FALSE}
setwd("C:/Users/karl_/CourseraRprogramming/RepData_PeerAssessment1")
```
## Loading and preprocessing the data
```{r echo=TRUE}
# load libraries
suppressMessages(library(lubridate))
suppressMessages(library(mice))
suppressMessages(library(ggplot2))
# Unzip File
unzip("activity.zip")
# Read data
data<-read.csv("activity.csv",stringsAsFactors=FALSE)
# convert data types
data$date<-as.Date(data$date)
# data$interval<-(seconds_to_period((data$interval)))
```
## What is mean total number of steps taken per day?
<!-- For this part of the assignment, you can ignore the missing values in the
dataset. Make a histogram of the total number of steps taken each day.
Calculate and report the mean and median total number of steps taken per day -->
```{r echo=TRUE}
# Calculate steps per day
TotPerDay<-aggregate(data$steps,by=list(data$date),FUN=sum,na.rm=TRUE)
colnames(TotPerDay)<-c("date","steps")
# calculate mean and median of steps per day
MeanStep<-mean(TotPerDay$steps,na.rm=TRUE)
MedianStep<-median(TotPerDay$steps,na.rm=TRUE)
# Create Histogram plot
with(TotPerDay,hist(steps,main="Steps per Day",col="deepskyblue4",breaks=10))
# Add text describing the data to graph as well as additional lines
abline(v=MeanStep,col="coral",lty="dashed",lwd=2)
abline(v=MedianStep,col="olivedrab2",lty="dotdash",lwd=2)
# Create Legend which also includes printing the actual number of mean and
# median steps per day
legend(x="topright",
col = c("coral","olivedrab2"),
lty= c("dashed","dotdash"),
lwd=2:2,
legend=c(
paste0("Mean: ", round(MeanStep), " steps/day"),
paste0("Median: ", round(MedianStep), " steps/day")),
cex=0.9)
```
## What is the average daily activity pattern?
<!--  Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis)
and the average number of steps taken, averaged across all days (y-axis)
Which 5-minute interval, on average across all the days in the dataset,
contains the maximum number of steps?-->
```{r echo=TRUE}
# Calculate mean number of steps per interval for the dataset
ActivityPattern<-aggregate(
data$steps,
by=list(data$interval),
FUN=mean,na.rm=TRUE)
colnames(ActivityPattern)<-c("interval","steps")
# Plot line time series of average steps
with(ActivityPattern,
plot(interval,steps,type="l")
)
#find the interval with the highest number of steps and print this on the chart
maxInterval<-ActivityPattern[which.max(ActivityPattern$steps),]
# print the interval with the highest number of steps on the chart
with(maxInterval,
points(interval,steps,pch=21,bg="red",main="Average Profile of Activity")
)
text(x=maxInterval$interval+700,y=maxInterval$steps,
labels=paste0("Maximum steps occurs during interval ",
maxInterval$interval)
)
```
## Imputing missing values
<!-- Note that there are a number of days/intervals where there are missing
values (coded as NA).
The presence of missing days may introduce bias into some calculations or
summaries of the data.
Calculate and report the total number of missing values in the dataset
(i.e. the total number of rows with NAs)
Devise a strategy for filling in all of the missing values in the dataset.
The strategy does not need to be sophisticated.
For example, you could use the mean/median for that day, or the mean for that
5-minute interval, etc.
Create a new dataset that is equal to the original dataset but with the
missing data filled in.
Make a histogram of the total number of steps taken each day
Calculate and report the mean and median total number of steps taken per day.
Do these values differ from the estimates from the first part of the
assignment?
What is the impact of imputing missing data on the estimates of the total
daily number of steps?
-->
Days with low total steps decrease significantly after missing values have been replace through imputation. This is expected as days with missing values should have a lower total count compared to days with complete data.
The distribution of total steps per day differ between the imputed data sets, however all of them have a distribution closer to normal compared to the original dataset which had large proportion of days in the region of less than 2500 steps/day.
```{r echo=TRUE}
# Calculate and report the total number of missing values in the dataset
# (i.e. the total number of rows with NAs)
NumberOfMissing<-sum(is.na(data$steps))
# fill in missing values by Predictive mean matching
# (create 5 datasets to check stability of estimations)
imputed_Data <- mice(data, m=5, maxit = 50, method = 'pmm', seed = 500,printFlag=FALSE)
# Create a new dataset with the missing data filled in.
completeData <- lapply(1:5,function(i)complete(imputed_Data,i))
#completeData <- lapply(1:5,function(i)data)
# Calculate daily averages of imputed data for comparison with the original data
TotPerDayImputed<-lapply(1:5,function(i){
TotPerDay<-aggregate(completeData[[i]]$steps,by=list(completeData[[i]]$date),FUN=sum)
colnames(TotPerDay)<-c("date","steps")
return(TotPerDay)
})
# Calculate deviation for each of the imputed datasets from the original data
DevDailyTot<-sapply(1:5,function(i)TotPerDayImputed[[i]]$steps-TotPerDay$steps)
# plot histogram of the original data
par(mfrow=c(2,3))
with(TotPerDay,hist(steps,main="Original Data",col="coral4",breaks=10))
mtext(paste0("Number of missing values: ",NumberOfMissing),cex=0.7)
# for each of the created inputed datasete, plot these on a common graph to see how they differ
for(i in 1:5){
# Plot line time series of average steps
with(TotPerDayImputed,
# Create Histogram plot
with(TotPerDayImputed[[i]],hist(steps,main=paste0("Imputed Dataset: ",i),col="deepskyblue4",breaks=10))
)
}
# reset plotting frame
par(mfrow=c(1,1))
```
## Are there differences in activity patterns between weekdays and weekends?
<!--- For this part the weekdays() function may be of some help here.
Use the dataset with the filled-in missing values for this part.
Create a new factor variable in the dataset with two levels -- "weekday" and
"weekend" indicating whether a given date is a weekday or weekend day.
Make a panel plot containing a time series plot (i.e. type = "l") of the
5-minute interval (x-axis) and the average number of steps taken, averaged
across all weekday days or weekend days #(y-axis).
The plot should look something like the following, which was created using
simulated data-->
```{r echo=TRUE}
# Create a new factor variable in the dataset with two levels -- "weekday" and
# "weekend" indicating whether a given date is a weekday or weekend day.
WDayData<-lapply(1:5,function(i){
data<-data.frame(
completeData[[i]],
weekday=as.factor(
x=as.numeric(wday(completeData[[i]]$date)%in%c(7,1))
)
)
# Change levels of weekday factor to be more descriptive
levels(data$weekday)=c("weekday","weekend")
return(data)
}
)
# Make a panel time series plot of the average number of steps taken per time
# inteval, averaged across all weekday days or weekend days
# Calculate mean number of steps per interval for the dataset
PatternWeekday<-lapply(1:5,function(i){
data<-aggregate(
WDayData[[i]]$steps,
by=list(WDayData[[i]]$interval,WDayData[[i]]$weekday),
FUN=mean,na.rm=TRUE
)
colnames(data)<-c("interval","weekday","steps")
return(data)
}
)
# Plot line time series of average steps
for(i in 1:5){
print(
ggplot(PatternWeekday[[i]],aes(x=interval,y=steps,col=weekday))+
geom_line()+ facet_grid( weekday ~ .)
)
}
```
# Create a new factor variable in the dataset with two levels -- "weekday" and
# "weekend" indicating whether a given date is a weekday or weekend day.
WDayData<-lapply(1:5,function(i){
data<-data.frame(
completeData[[i]],
weekday=as.factor(
x=as.numeric(wday(completeData[[i]]$date)%in%c(7,1))
)
)
# Change levels of weekday factor to be more descriptive
levels(data$weekday)=c("weekday","weekend")
return(data)
}
)
---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
<!--- Set up working directory -->
```{r echo=FALSE}
setwd("C:/Users/karl_/CourseraRprogramming/RepData_PeerAssessment1")
```
## Loading and preprocessing the data
```{r echo=TRUE}
# load libraries
suppressMessages(library(lubridate))
suppressMessages(library(mice))
suppressMessages(library(ggplot2))
# Unzip File
unzip("activity.zip")
# Read data
data<-read.csv("activity.csv",stringsAsFactors=FALSE)
# convert data types
data$date<-as.Date(data$date)
# data$interval<-(seconds_to_period((data$interval)))
```
## What is mean total number of steps taken per day?
<!-- For this part of the assignment, you can ignore the missing values in the
dataset. Make a histogram of the total number of steps taken each day.
Calculate and report the mean and median total number of steps taken per day -->
```{r echo=TRUE}
# Calculate steps per day
TotPerDay<-aggregate(data$steps,by=list(data$date),FUN=sum,na.rm=TRUE)
colnames(TotPerDay)<-c("date","steps")
# calculate mean and median of steps per day
MeanStep<-mean(TotPerDay$steps,na.rm=TRUE)
MedianStep<-median(TotPerDay$steps,na.rm=TRUE)
# Create Histogram plot
with(TotPerDay,hist(steps,main="Steps per Day",col="deepskyblue4",breaks=10))
# Add text describing the data to graph as well as additional lines
abline(v=MeanStep,col="coral",lty="dashed",lwd=2)
abline(v=MedianStep,col="olivedrab2",lty="dotdash",lwd=2)
# Create Legend which also includes printing the actual number of mean and
# median steps per day
legend(x="topright",
col = c("coral","olivedrab2"),
lty= c("dashed","dotdash"),
lwd=2:2,
legend=c(
paste0("Mean: ", round(MeanStep), " steps/day"),
paste0("Median: ", round(MedianStep), " steps/day")),
cex=0.9)
```
## What is the average daily activity pattern?
<!--  Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis)
and the average number of steps taken, averaged across all days (y-axis)
Which 5-minute interval, on average across all the days in the dataset,
contains the maximum number of steps?-->
```{r echo=TRUE}
# Calculate mean number of steps per interval for the dataset
ActivityPattern<-aggregate(
data$steps,
by=list(data$interval),
FUN=mean,na.rm=TRUE)
colnames(ActivityPattern)<-c("interval","steps")
# Plot line time series of average steps
with(ActivityPattern,
plot(interval,steps,type="l")
)
#find the interval with the highest number of steps and print this on the chart
maxInterval<-ActivityPattern[which.max(ActivityPattern$steps),]
# print the interval with the highest number of steps on the chart
with(maxInterval,
points(interval,steps,pch=21,bg="red",main="Average Profile of Activity")
)
text(x=maxInterval$interval+700,y=maxInterval$steps,
labels=paste0("Maximum steps occurs during interval ",
maxInterval$interval)
)
```
## Imputing missing values
<!-- Note that there are a number of days/intervals where there are missing
values (coded as NA).
The presence of missing days may introduce bias into some calculations or
summaries of the data.
Calculate and report the total number of missing values in the dataset
(i.e. the total number of rows with NAs)
Devise a strategy for filling in all of the missing values in the dataset.
The strategy does not need to be sophisticated.
For example, you could use the mean/median for that day, or the mean for that
5-minute interval, etc.
Create a new dataset that is equal to the original dataset but with the
missing data filled in.
Make a histogram of the total number of steps taken each day
Calculate and report the mean and median total number of steps taken per day.
Do these values differ from the estimates from the first part of the
assignment?
What is the impact of imputing missing data on the estimates of the total
daily number of steps?
-->
Days with low total steps decrease significantly after missing values have been replace through imputation. This is expected as days with missing values should have a lower total count compared to days with complete data.
The distribution of total steps per day differ between the imputed data sets, however all of them have a distribution closer to normal compared to the original dataset which had large proportion of days in the region of less than 2500 steps/day.
```{r echo=TRUE}
# Calculate and report the total number of missing values in the dataset
# (i.e. the total number of rows with NAs)
NumberOfMissing<-sum(is.na(data$steps))
setwd("C:/Users/karl_/CourseraRprogramming/RepData_PeerAssessment1")
suppressMessages(library(lubridate))
suppressMessages(library(mice))
suppressMessages(library(ggplot2))
unzip("activity.zip")
# Read data
data<-read.csv("activity.csv",stringsAsFactors=FALSE)
# convert data types
data$date<-as.Date(data$date)
# data$interval<-(seconds_to_period((data$interval)))
otPerDay<-aggregate(data$steps,by=list(data$date),FUN=sum,na.rm=TRUE)
colnames(TotPerDay)<-c("date","steps")
# calculate mean and median of steps per day
MeanStep<-mean(TotPerDay$steps,na.rm=TRUE)
MedianStep<-median(TotPerDay$steps,na.rm=TRUE)
# Create Histogram plot
with(TotPerDay,hist(steps,main="Steps per Day",col="deepskyblue4",breaks=10))
# Add text describing the data to graph as well as additional lines
abline(v=MeanStep,col="coral",lty="dashed",lwd=2)
abline(v=MedianStep,col="olivedrab2",lty="dotdash",lwd=2)
# Create Legend which also includes printing the actual number of mean and
# median steps per day
legend(x="topright",
col = c("coral","olivedrab2"),
lty= c("dashed","dotdash"),
lwd=2:2,
legend=c(
paste0("Mean: ", round(MeanStep), " steps/day"),
paste0("Median: ", round(MedianStep), " steps/day")),
cex=0.9)
TotPerDay<-aggregate(data$steps,by=list(data$date),FUN=sum,na.rm=TRUE)
colnames(TotPerDay)<-c("date","steps")
# calculate mean and median of steps per day
MeanStep<-mean(TotPerDay$steps,na.rm=TRUE)
MedianStep<-median(TotPerDay$steps,na.rm=TRUE)
# Create Histogram plot
with(TotPerDay,hist(steps,main="Steps per Day",col="deepskyblue4",breaks=10))
# Add text describing the data to graph as well as additional lines
abline(v=MeanStep,col="coral",lty="dashed",lwd=2)
abline(v=MedianStep,col="olivedrab2",lty="dotdash",lwd=2)
# Create Legend which also includes printing the actual number of mean and
# median steps per day
legend(x="topright",
col = c("coral","olivedrab2"),
lty= c("dashed","dotdash"),
lwd=2:2,
legend=c(
paste0("Mean: ", round(MeanStep), " steps/day"),
paste0("Median: ", round(MedianStep), " steps/day")),
cex=0.9)
# Calculate mean number of steps per interval for the dataset
ActivityPattern<-aggregate(
data$steps,
by=list(data$interval),
FUN=mean,na.rm=TRUE)
colnames(ActivityPattern)<-c("interval","steps")
# Plot line time series of average steps
with(ActivityPattern,
plot(interval,steps,type="l")
)
#find the interval with the highest number of steps and print this on the chart
maxInterval<-ActivityPattern[which.max(ActivityPattern$steps),]
# print the interval with the highest number of steps on the chart
with(maxInterval,
points(interval,steps,pch=21,bg="red",main="Average Profile of Activity")
)
text(x=maxInterval$interval+700,y=maxInterval$steps,
labels=paste0("Maximum steps occurs during interval ",
maxInterval$interval)
)
# Calculate and report the total number of missing values in the dataset
# (i.e. the total number of rows with NAs)
NumberOfMissing<-sum(is.na(data$steps))
# fill in missing values by Predictive mean matching
# (create 5 datasets to check stability of estimations)
imputed_Data <- mice(data, m=5, maxit = 50, method = 'pmm', seed = 500,printFlag=FALSE)
imputed_Data <- mice(data[is.na(data$steps),], m=5, maxit = 50, method = 'pmm', seed = 500,printFlag=FALSE)
# Create a new dataset with the missing data filled in.
completeData <- lapply(1:5,function(i)complete(imputed_Data,i))
#completeData <- lapply(1:5,function(i)data)
TotPerDayImputed<-lapply(1:5,function(i){
TotPerDay<-aggregate(completeData[[i]]$steps,by=list(completeData[[i]]$date),FUN=sum)
colnames(TotPerDay)<-c("date","steps")
return(TotPerDay)
})
# Calculate deviation for each of the imputed datasets from the original data
DevDailyTot<-sapply(1:5,function(i)TotPerDayImputed[[i]]$steps-TotPerDay$steps)
# Calculate daily averages of imputed data for comparison with the original data
TotPerDayImputed<-lapply(1:5,function(i){
TotPerDay<-aggregate(completeData[[i]]$steps,by=list(completeData[[i]]$date),FUN=sum)
colnames(TotPerDay)<-c("date","steps")
return(TotPerDay)
})
DevDailyTot<-sapply(1:5,function(i)TotPerDayImputed[[i]]$steps-TotPerDay$steps)
DevDailyTot
TotPerDayImputed[[i]]$steps
i<-1
TotPerDayImputed[[i]]$steps
imputed_Data <- mice(data[!is.na(data$steps),], m=5, maxit = 50, method = 'pmm', seed = 500,printFlag=FALSE)
completeData <- lapply(1:5,function(i)complete(imputed_Data,i))
#completeData <- lapply(1:5,function(i)data)
completeData
TotPerDayImputed<-lapply(1:5,function(i){
TotPerDay<-aggregate(completeData[[i]]$steps,by=list(completeData[[i]]$date),FUN=sum)
colnames(TotPerDay)<-c("date","steps")
return(TotPerDay)
})
DevDailyTot<-sapply(1:5,function(i)TotPerDayImputed[[i]]$steps-TotPerDay$steps)
TotPerDayImputed[[i]]$steps
DevDailyTot
par(mfrow=c(2,3))
with(TotPerDay,hist(steps,main="Original Data",col="coral4",breaks=10))
mtext(paste0("Number of missing values: ",NumberOfMissing),cex=0.7)
# for each of the created inputed datasete, plot these on a common graph to see how they differ
for(i in 1:5){
# Plot line time series of average steps
with(TotPerDayImputed,
# Create Histogram plot
with(TotPerDayImputed[[i]],hist(steps,main=paste0("Imputed Dataset: ",i),col="deepskyblue4",breaks=10))
)
}
# reset plotting frame
par(mfrow=c(1,1))
DevDailyTot<-sapply(1:5,function(i)TotPerDayImputed[[i]]$steps-TotPerDay$steps)
DevDailyTot
data
imputed_Data <- mice(data, m=5, maxit = 50, method = 'pmm', seed = 500,printFlag=FALSE)
is.na(data)
colSums(is.na(data))
imputed_Data <- mice(data$steps, m=5, maxit = 50, method = 'pmm', seed = 500,printFlag=FALSE)
imputed_Data <- mice(data, m=5, maxit = 50, method = 'pmm', seed = 500,printFlag=FALSE)
data$steps
500,printFlag=FALSE)
imputed_Data <- mice(data, m=5, maxit = 50, method = 'pmm', seed = 500)#,printFlag=FALSE)
imputed_Data <- mice(data, m=5, maxit = 50, method = 'pmm', seed = 500)
